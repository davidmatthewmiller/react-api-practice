{"version":3,"sources":["reportWebVitals.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","props","name","email","id","className","src","alt","CardList","robots","cardArray","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","React","Component","App","onSearchChange","event","searchfield","target","value","fetch","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gMAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,2CCiBCQ,EAtBF,SAACC,GACV,IAAQC,EAAoBD,EAApBC,KAAMC,EAAcF,EAAdE,MAAOC,EAAOH,EAAPG,GAUrB,OACI,sBAAKC,UAAU,sDAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAA1B,iBAA6CG,IAAI,WACzD,gCACI,6BAAKL,IACL,4BAAIC,WCiCLK,EAhDE,SAAC,GAAe,IAAbC,EAAY,EAAZA,OAmBVC,EAAYD,EAAOE,KAAI,SAACC,EAAMC,GAChC,OACI,cAAC,EAAD,CAEIT,GAAIK,EAAOI,GAAGT,GACdF,KAAMO,EAAOI,GAAGX,KAChBC,MAAOM,EAAOI,GAAGV,OAHZM,EAAOI,GAAGT,OAO3B,OACI,8BACKM,KCjBEI,EAfG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACjB,OACI,qBAAKV,UAAU,MAAf,SACI,uBACIA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBAGZC,SAAUH,OCDXI,G,MARA,SAAClB,GACZ,OACI,qBAAKmB,MAAO,CAAEC,SAAU,SAAUC,OAAO,kBAAmBC,OAAQ,SAApE,SACKtB,EAAMuB,aCmBJC,E,kDArBX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTC,UAAU,GAHJ,E,qDAOd,SAAkBC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,oBAG9B,WACI,OAAIG,KAAKJ,MAAMC,SACJ,2DAEJG,KAAK7B,MAAMuB,a,GAhBEQ,IAAMC,WC6FnBC,E,kDA7EX,aAAe,IAAD,8BACV,gBAyBJC,eAAiB,SAACC,GAOd,EAAKL,SAAS,CAAEM,YAAaD,EAAME,OAAOC,SA9B1C,EAAKb,MAAQ,CACTjB,OAAQ,GAER4B,YAAa,IANP,E,qDAad,WAAqB,IAAD,OAQhBG,MAAM,8CACD9C,MAAK,SAAA+C,GAAQ,OAAGA,EAASC,UACzBhD,MAAK,SAAAiD,GAAU,EAAKZ,SAAS,CAAEtB,OAAQkC,S,oBAqBhD,WAAU,IAAD,OAICC,EAAiBd,KAAKJ,MAAMjB,OAAOoC,QAAO,SAAAC,GAC5C,OAAOA,EAAM5C,KAAK6C,cAAcC,SAAS,EAAKtB,MAAMW,YAAYU,kBAKpE,OAAiC,IAA7BjB,KAAKJ,MAAMjB,OAAOwC,OAGX,yCAGH,sBAAK5C,UAAU,KAAf,UACI,oBAAIA,UAAY,KAAhB,yBACA,cAAC,EAAD,CAAWU,aAAce,KAAKK,iBAI9B,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAU1B,OAAQmC,e,GArE5BZ,IAAMC,WCPxBiB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1B/D,M","file":"static/js/main.b5401f22.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\n\r\nconst Card = (props) => {\r\n    const { name, email, id } = props;\r\n    // this ^^ destructuring allows us to\r\n    // say {id} {name} {email} in jsx instead\r\n    // of {props.id} {props.name} {props.email}\r\n    \r\n    // even better than ^^ you can destructure \r\n    // within the function parameters like\r\n    // const Card = ({ name, email, id }) => {\r\n    // but I will keep this as is for example purposes\r\n\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img src={`https://robohash.org/${id}?size=200x200`} alt='robots'></img>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) =>{\r\n    // I used destructuring in the parameter,\r\n    // its just like naming parameters. 'props'\r\n    // is just a placeholder like I could leave\r\n    // it (props) and use props.id props.name\r\n    // but its cleaner code to destructure\r\n    // with = ({<parameter name>}) =>\r\n\r\n    // return (\r\n        // <div>\r\n        //     <Card id={robots[0].id} name={robots[0].name} email={robots[0].email}/>\r\n        //     <Card id={robots[1].id} name={robots[1].name} email={robots[1].email}/>\r\n        //     <Card id={robots[2].id} name={robots[2].name} email={robots[2].email}/>\r\n        // </div>\r\n    // )\r\n    // instead of above lets do a loop \r\n    // to cover each robot, even better\r\n    // than forEach is to use map\r\n\r\n    const cardArray = robots.map((user, i) => {\r\n        return(\r\n            <Card \r\n                key={robots[i].id} \r\n                id={robots[i].id} \r\n                name={robots[i].name} \r\n                email={robots[i].email}\r\n            />\r\n        )\r\n    });\r\n    return(\r\n        <div>\r\n            {cardArray}\r\n        </div>\r\n    ) \r\n    // We made an array of Card.js components\r\n    // that are filled in by index.js sending\r\n    // a prop object of robots.js through to\r\n    // this file\r\n    // The cardArray that is made is styled\r\n    // to the specifications within Card\r\n    // because that is the component making\r\n    // up our array\r\n    // It must be returned between jsx tags\r\n    // because it goes straight from this \r\n    // return to being rendered according to\r\n    // index.js and rendered DOM needs jsx tags\r\n}\r\n\r\nexport default CardList;\r\n\r\n// EXPLANATION FOR 'key={robots[i].id}'\r\n// React virtual DOM keeps track of all the \r\n// cards, but it wants me to give them a \r\n// key prop so that if some cards get deleted\r\n// it knows how to change them individually\r\n// instead of changing the entire DOM\r\n// And robots[i].id must be in curly brackets \r\n// because it is a javascript prop argument\r\n\r\n// A key prop should be a unique\r\n// value that can't get changed. \r\n// If it was the index then we shifted\r\n// this array then the key prop would change\r\n// so using the index as the key prop is\r\n// a bad idea\r\n// That is why we use the id property of \r\n// the robots object\r\n\r\n// Also before I moved the return statement\r\n// to be multi-line and easier to read it was\r\n// return <Card key={robots[i].id} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\r\n// So as you can see prop arguments can be \r\n// split by line no problem and just remember\r\n// to give your multi-line return a ()\r\n\r\n\r\n// Even cleaner way to do all this:\r\n\r\n// Because everything returned in {} is\r\n// javascript we can actually not use \r\n// cardArray as a const array like:\r\n\r\n// const CardList = ({ robots }) =>{\r\n// return(\r\n//     <div>\r\n//         {\r\n//             robots.map((user, i) => {\r\n//                 return(\r\n//                     <Card \r\n//                         key={robots[i].id} \r\n//                         id={robots[i].id} \r\n//                         name={robots[i].name} \r\n//                         email={robots[i].email}\r\n//                     />\r\n//                 )\r\n//             })\r\n//         }\r\n//     </div>\r\n// ) \r\n// }\r\n\r\n// This outputs an unnamed array of Cards \r\n// filled with keys for each card, we never \r\n// needed a name for the array like cardArray\r\n\r\n// Also I used a ; after const cardArray\r\n// but not the nameless mapping because I read\r\n// to use ; for variables but not functions\r\n// and cardArray is a variable but the mapping\r\n// without naming the array is a function","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    return(\r\n        <div className='pa2'>\r\n            <input \r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search' \r\n                placeholder='search robots' \r\n                // onChange is default html that means run this \r\n                // any time the input changes\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflow: 'scroll', border:'5px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true})\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Ooooops. We have an error</h1>\r\n        } \r\n        return this.props.children;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default ErrorBoundary;\r\n\r\n// Put this right below const CardList = ({ robots }) =>{\r\n// in CardList to throw an error test\r\n// if (true) {\r\n//     throw new Error('NOOOOO! :O');\r\n// }\r\n// React in developer mode will not let you run the \r\n// app with errors but for a split second you will see\r\n// error return message from this component","import React from 'react';\r\nimport CardList from '../components/CardList';\r\n// import { robots } from './robots';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary'\r\n\r\n// States are an object which describes our \r\n// App, state is something that can change\r\n// and affect our App \r\n// lets take this obj and put it into App\r\n// const state = {\r\n//     robots: robots,\r\n//     searchfield: ''\r\n// }\r\n\r\nclass App extends React.Component {\r\n    constructor() {\r\n        super()\r\n        // We have to call the super of component because component is this classes superclass\r\n        this.state = {\r\n            robots: [],\r\n            // robots: [robots],\r\n            searchfield: ''\r\n        }\r\n    }\r\n// State usually lives in the parent 'Component'\r\n// and passes state down to different \r\n// components as props arguments\r\n\r\n    componentDidMount() {\r\n        // this.setState({ robots: robots});\r\n        // fetch('https://jsonplaceholder.typicode.com/users').then(response=> {\r\n        //     return response.json();\r\n        // })\r\n        // .then(users => {\r\n        //     this.setState({ robots: users})\r\n        // })\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response=> response.json())\r\n            .then(users => {this.setState({ robots: users})})\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n    // Without using arrow functions it will error from trying to\r\n    // read onChange's prop this. only within SearchBox.js\r\n    // Arrow functions fix this by letting props refer to their\r\n    // this. in its original file\r\n        // console.log(event.target.value);\r\n        //setState is a default fuction in React\r\n        this.setState({ searchfield: event.target.value})\r\n        // const filteredRobots = this.state.robots.filter(robots =>{\r\n        //     return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        //     // we use toLowerCase so we don't have to compare Caps\r\n        //     // return name of robots which includes search field\r\n        //     // we use this. alot because we are pulling from state\r\n        // }); \r\n        // after testing ^^ moved to render() so the cards can be updated\r\n        // console.log(filteredRobots);\r\n    }\r\n    \r\n    render() {\r\n        // const { robots, searchfield } = this.state;\r\n        // with this destructuring I could remove all this.state\r\n        // inside of render() {} but I will leave it for example \r\n        const filteredRobots = this.state.robots.filter(robot =>{\r\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n            // we use toLowerCase so we don't have to compare Caps\r\n            // return name of robots which includes search field\r\n            // we use this. alot because we are pulling from state\r\n        });\r\n        if (this.state.robots.length === 0) {\r\n            // could also say if (!this.state.robots.length) {\r\n            // because that means if ^ is false (===0) then true\r\n            return <h1>Loading</h1>\r\n        } else {\r\n            return(\r\n                <div className='tc'>\r\n                    <h1 className = 'f1'>Robofriends</h1>\r\n                    <SearchBox searchChange={this.onSearchChange}/>\r\n                    {/* uses this. because App is an object */}\r\n                    {/* <CardList robots={this.state.robots}/>\r\n                    we replaced ^^ with filteredRobots  */}\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList robots={filteredRobots}/>\r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default App;\r\n\r\n// the last if else could be a ternary instead\r\n// in place of if (this.state)... vv\r\n\r\n    // return !this.state.robots.length ?\r\n    // <h1>Loading</h1> :\r\n    // (\r\n    //     <div className='tc'>\r\n    //         <h1 className = 'f1'>Robofriends</h1>\r\n    //         <SearchBox searchChange={this.onSearchChange}/>\r\n    //         {/* uses this. because App is an object */}\r\n    //         {/* <CardList robots={this.state.robots}/>\r\n    //         we replaced ^^ with filteredRobots  */}\r\n    //         <Scroll>\r\n    //             <CardList robots={filteredRobots}/>\r\n    //         </Scroll>\r\n    //     </div>\r\n    // )\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n// we put robots in {} to destructure it bc\n// it used 'export' not 'export default' and in \n// the {} we put the variables we want to import\nimport App from './containers/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}